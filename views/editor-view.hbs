<p>{{&editorsLink src name}}/ {{name}}</p>
<div class="action-buttons">
        <div class="theme-buttons">
            <button id="font-size-dec">font -</button>
            <button id="theme-change">theme change</button>
            <button id="font-size-inc">font +</button>
        </div>
        <div>
            <button id="saveSettings">zapisz ustawienia</button> 
            <button id="editDirName">zmien nazwe</button>
            <a href="{{src}}" target="_blank">pogląd pliku</a>
        </div>
        <dialog id="editDirNameDialog">
            <input type="text" id="editDirNameDialogInput" name="editDirNameDialogInput" value="">
            <button value="cancel" formmethod="dialog" id="editDirNameDialogCloseBtn">zamknij</button>
            <button formmethod="dialog" id="editDirNameDialogSumbitBtn">zatwierdź</button>
        </dialog> 
</div>
<div class="editor" id="editor">
    <div class="editor-area">
        <div id="line-numbers"></div>
        <textarea name="textarea" id="textarea">{{content}}</textarea>
    </div>
    <button type="submit" id="sumbitFileChangesBtn">zapisz zmiany</button> 
</div>


<script>
    let fontSize = 0; 
    const themes = {{&json themes}}
    const src = "{{src}}"
    let currTheme = 0

    const getLines = () =>{
        numbers.innerHTML = ""
            area.value.split("\n").forEach((line,i)=>{
                numbers.innerHTML += `<span>${i+1}</span>`
        })
    }

    const area = document.getElementById("textarea")
    const numbers = document.getElementById("line-numbers")
    const decFontSize = document.getElementById("font-size-dec")
    const incFontSize = document.getElementById("font-size-inc")
    const changeTheme = document.getElementById("theme-change")
    const saveSettings =  document.getElementById("saveSettings")

    saveSettings.addEventListener("click", (event) => {
        const options = {
            method: "POST",
            headers: {
                "Content-Type": "application/json"     
            },
            body: JSON.stringify({fontSize: fontSize, theme: currTheme}) // theme to 0,1,2,3
        };
        fetch("/saveEditorsSettings", options).catch(ex => {
            console.log("Coś poszło nie tak:", ex);
        });
    });

     decFontSize.addEventListener("click", (event) => {
        fontSize -=1 
        if(fontSize <= 1) fontSize = 1
        area.style.fontSize = fontSize + "px";
        numbers.style.fontSize = fontSize + "px";
        });
     incFontSize.addEventListener("click", (event) => {
        fontSize +=1 
        area.style.fontSize = fontSize + "px";
        numbers.style.fontSize = fontSize + "px";
    });
     changeTheme.addEventListener("click", (event) => {
         currTheme += 1
         if(currTheme >= 4) currTheme = 0
            setFontSizeAndTheme(fontSize, currTheme)
    });



    window.addEventListener("load", (event) => {
        const options = {
            method: "POST",
            headers: {
                "Content-Type": "application/json"     
            },
        };
      fetch("/getEditorSettings", options)
        .then(res => res.json()) // Użyj res.text() dla prostej odpowiedzi tekstowej
        .then(data => {
            setFontSizeAndTheme(data.fontSize, data.theme)
        })
        .catch(ex => {
            console.log("Coś poszło nie tak:", ex);
        });
        getLines()
    });
    area.onkeyup = function () {
        getLines()
    }

    document.getElementById("sumbitFileChangesBtn").addEventListener("click",() =>{
         const options = {
            method: "POST",
            headers: {
                "Content-Type": "application/json"     
            },
            body: JSON.stringify({content : area.value, src : src})
        };
      fetch("/saveFileChanges", options).catch(ex => {
            console.log("Coś poszło nie tak:", ex);
        });
    })

    
    const editDirName = document.getElementById('editDirName');
    const editDirNameDialog = document.getElementById('editDirNameDialog');
    const editDirNameDialogInput = document.getElementById('editDirNameDialogInput');
    const editDirNameDialogCloseBtn = document.getElementById('editDirNameDialogCloseBtn');
    const editDirNameDialogSumbitBtn = document.getElementById('editDirNameDialogSumbitBtn');
    
    editDirName.addEventListener('click', () => {
        editDirNameDialog.showModal();
    });
    editDirNameDialogCloseBtn.addEventListener('click', () => {
        editDirNameDialog.close();
    });
    editDirNameDialogSumbitBtn.addEventListener('click', () => {
        if(!editDirNameDialogInput.value) return;
       const options = {
            method: "POST",
            headers: {
                "Content-Type": "application/json"     
            },
            body: JSON.stringify({value:editDirNameDialogInput.value, src:src})
        };
        fetch("/changeFileName", options).then(()=>{
            editDirNameDialogInput.value = ""
            editDirNameDialog.close();
            window.location.reload()
        }).catch((ex)=>{
            console.log("coś poszło nie tak : ", ex)
        }) 
    });

    
    document.getElementById("sumbitRenameFileBtn").addEventListener("click",() =>{
         const options = {
            method: "POST",
            headers: {
                "Content-Type": "application/json"     
            },
            body: JSON.stringify({content : area.value, src : src})
        };
      fetch("/changeFileName", options).catch(ex => {
            console.log("Coś poszło nie tak:", ex);
        });
    })

    


    function setFontSizeAndTheme(fsize, theme)
    {
        fontSize = fsize
        currTheme = theme
        area.style.fontSize = fsize + "px";
        numbers.style.fontSize = fsize+ "px";
        area.style.backgroundColor = themes[theme].bg;
        area.style.color = themes[theme].fg;
    }


</script>

<style>
    *{
        margin:0;padding:0;box-sizing: border-box;
    }
    :root{
        
    }
    .editor{
        display: flex;
        justify-content: center;
        flex-direction: column;
        align-items: center;
        margin:20px;
        padding: 0; 
    }
    .editor-area{
        width:600px;
        height: 500px;
        overflow: auto;
        display: flex;
    }
    .theme-buttons{
        display: flex;
    }
    .theme-buttons > form{
        width:100px;
    }
    #textarea{
        width:560px;
        height: ;
        padding-left:10px;
        overflow: hidden;
    }
     #line-numbers{
        width:40px;
        display: flex;
        flex-direction: column;
     }
    #line-numbers > span{
        border-left: 10px solid red;
        padding-left:4px;
    }
</style>